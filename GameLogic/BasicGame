import random

# Define card values
card_values = {
    '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, '10': 10,
    'J': 10, 'Q': 10, 'K': 10, 'A': 11
}

# Create a standard deck of 52 cards
def create_deck(num_decks=2):
    suits = ['Hearts', 'Diamonds', 'Clubs', 'Spades']
    ranks = list(card_values.keys())
    deck = [f'{rank} of {suit}' for suit in suits for rank in ranks]
    return deck * num_decks

# Shuffle the deck
def shuffle_deck(deck):
    random.shuffle(deck)
    return deck

# Deal a card from the deck
def deal_card(deck):
    return deck.pop()

# Calculate the value of the hand
# Adjusts for aces if necessary
def hand_value(hand):
    value = 0
    ace_count = 0
    for card in hand:
        rank = card.split()[0]
        value += card_values[rank]
        if rank == 'A':
            ace_count += 1
    while value > 21 and ace_count:
        value -= 10
        ace_count -= 1
    return value

# Convert Cards to Strings
def card_to_str(card):
    rank, suit = card.split(' of ')
    suit_symbols = {
        'Hearts': '  ♥',
        'Diamonds': '  ♦',
        'Clubs': '  ♣',
        'Spades': '  ♠'
    }
    return f"{rank:<2} {suit_symbols[suit]}"

# Terminal output for readability while playing
def print_hand(player, hand, hide_first_card=False):
    rows = ['', '', '', '', '']
    if hide_first_card:
        visible_hand = [hand[0]]
        card_strs = [card_to_str(hand[0])]
    else:
        visible_hand = hand
        card_strs = [card_to_str(card) for card in hand]
    
    for card_str in card_strs:
        if card_str == '[Hidden]':
            rows[0] += "+------+"  
            rows[1] += "|[Hidden]| "  
            rows[2] += "|      |"  
            rows[3] += "|      |"  
            rows[4] += "+------+"  
        else:
            rows[0] += "+------+"  
            rows[1] += f"|{card_str}|"  
            rows[2] += "|      |"  
            rows[3] += "|      |"  
            rows[4] += "+------+"  
    
    print(f"{player}'s hand:")
    print("\n".join(rows))
    
    if hide_first_card:
        print(f"{player}'s hand: {card_to_str(hand[0])} [Hidden]")
    else:
        print(f"{player}'s hand: {', '.join(card_strs)} (Value: {hand_value(hand)})")

# Simulates the Dealer hitting until 17 or higher
def dealer_turn(deck, hand):
    while hand_value(hand) <= 17:
        hand.append(deal_card(deck))
    return hand

# Handles player's actions (Hit, Stand, Double)
def player_turn(deck, hand):
    while True:
        action = input("Do you want to 'hit', 'stand', or 'double'? ").lower()
        if action == 'hit':
            hand.append(deal_card(deck))
            print_hand('Player', hand)
            if hand_value(hand) > 21:
                print("Player busts!")
                break
        elif action == 'stand':
            break
        elif action == 'double':
            hand.append(deal_card(deck))
            print_hand('Player', hand)
            break  # End player's turn after doubling down
        else:
            print("Invalid action. Please choose 'hit', 'stand', or 'double'.")

# Handles splitting hands based on player choice
def handle_split(deck, hand):
    if len(hand) == 2 and hand[0].split()[0] == hand[1].split()[0]:
        while True:
            split_decision = input("You have a pair. Do you want to split? If so type 'yes' or 'no'!").lower()
            if split_decision == 'yes':
                hand1 = [hand.pop(0), deal_card(deck)]
                hand2 = [hand.pop(0), deal_card(deck)]
                print("\nSplitting hands:")
                print_hand('Player Hand 1', hand1)
                print_hand('Player Hand 2', hand2)
                
                # Play both hands
                player_turn(deck, hand1)
                player_turn(deck, hand2)
                return [hand1, hand2]
            elif split_decision == 'no':
                return [hand]
            else:
                print("Invalid choice. Please choose 'split' or 'stand'.")
    return [hand]

# Combines individual parts into the full game
def play_blackjack():
    deck = create_deck(num_decks=2)  
    shuffle_deck(deck)
    
    # Initialize hands
    player_hand = [deal_card(deck), deal_card(deck)]
    dealer_hand = [deal_card(deck), deal_card(deck)]
    
    # Show initial hands
    print_hand('Dealer', dealer_hand, hide_first_card=True)
    print_hand('Player', player_hand)
    
    # Player's turn
    hands_to_play = handle_split(deck, player_hand)
    
    for hand in hands_to_play:
        player_turn(deck, hand)
    
    # Dealer's turn
    print("\nDealer's turn:")
    dealer_hand = dealer_turn(deck, dealer_hand)
    print_hand('Dealer', dealer_hand)  # Reveal the dealer's hand after playing out

    # Determine the winner for each hand
    for hand in hands_to_play:
        player_score = hand_value(hand)
        dealer_score = hand_value(dealer_hand)
        
        print("\nFinal Scores:")
        print(f"Player: {player_score}")
        print(f"Dealer: {dealer_score}")
        
        # Determine the winner
        if player_score > 21:
            print("Player busts! Dealer wins.")
        elif dealer_score > 21:
            print("Dealer busts! Player wins.")
        elif player_score > dealer_score:
            print("Player wins!")
        elif player_score < dealer_score:
            print("Dealer wins!")
        else:
            print("It's a tie!")

if __name__ == "__main__":
    play_blackjack()
